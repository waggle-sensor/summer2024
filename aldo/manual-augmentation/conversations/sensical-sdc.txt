>>> The follow are randomized and cleaned up entries from a dataframe that was produced by `df_test = sage_data_client.query(start='-1h', tail=1)`
... 
... ,timestamp,name,value,meta.host,meta.job,meta.node,meta.plugin,meta.sensor,meta.task,meta.vsn,meta.zone
... 2172,2024-08-07 16:50:43.620566389+00:00,env.pressure,98936,0000d83add18cb30.ws-rpi,Pluginctl,000048b02d15bda5,waggle/plugin-iio:0.7.0,bme680,wes-iio-bme680,W022,shield
... 2162,2024-08-07 16:50:31.117151362+00:00,env.pressure,101841,0000d83add0dbd13.ws-rpi,Pluginctl,000048b02dd3c637,waggle/plugin-iio:0.7.0,bme680,wes-iio-bme680,W0BE,shield
... 2166,2024-08-07 16:50:29.146768568+00:00,env.pressure,98974,0000d83add0dbd5e.ws-rpi,Pluginctl,000048b02dd3c296,waggle/plugin-iio:0.7.0,bme680,wes-iio-bme680,W09F,shield
... 2128,2024-08-07 16:50:36.520600926+00:00,env.pressure,79957.453125,000048b02d3ae2f4.ws-nxcore,Pluginctl,000048b02d3ae2f4,waggle/plugin-iio:0.6.0,bme280,wes-iio-bme280,W084,core
... 2545,2024-08-07 16:50:53.397039785+00:00,env.temperature,25.67,0000dca632a3058b.ws-rpi,Pluginctl,000048b02d15bc7c,waggle/plugin-iio:0.7.0,bme680,wes-iio-bme680,W023,shield
... 2156,2024-08-07 16:50:35.902073314+00:00,env.pressure,98949.304687,000048b02dd3c6f0.ws-nxcore,Pluginctl,000048b02dd3c6f0,waggle/plugin-iio:0.6.0,bme280,wes-iio-bme280,W0B0,core
... 2406,2024-08-07 16:50:36.632779914+00:00,env.relative_humidity,17.593,000048b02dd3c5bd.ws-nxcore,Pluginctl,000048b02dd3c5bd,waggle/plugin-iio:0.6.0,bme280,wes-iio-bme280,W0B8,core
... 2518,2024-08-07 16:50:50.857317063+00:00,env.temperature,45.18,000048b02dd3c5e0.ws-nxcore,Pluginctl,000048b02dd3c5e0,waggle/plugin-iio:0.6.0,bme280,wes-iio-bme280,W0B1,core
... 2404,2024-08-07 16:50:56.628517931+00:00,env.relative_humidity,17.001,000048b02dd3c51f.ws-nxcore,Pluginctl,000048b02dd3c51f,waggle/plugin-iio:0.6.0,bme280,wes-iio-bme280,W099,core
... 
... That is the general structure of the dataframe. Given the following code that makes the line plot and histogram of pressure, can you provide me the code to graph the line plot and histogram of both 
... pressure and temperature for node W0B0 from the last three hours?
... 
... # code for node W07B for pressure in the last 8 hours
... df = sage_data_client.query(
...     start="-8h",
...     filter={
...         "name": "env.pressure",
...         "vsn": "W07B",
...         "sensor": "bme680"
...     }
... )
... # line plot
... df.set_index("timestamp").value.plot()
... # histogram
... df.value.hist(bins=100)
Here's the code to graph the line plot and histogram of both pressure and temperature for node W0B0 from the last three hours:

```python
import pandas as pd
import matplotlib.pyplot as plt

# Filter data for node W0B0 from the last 3 hours
df = sage_data_client.query(
    start="-3h",
    filter={
        "name": ["env.pressure", "env.temperature"],
        "vsn": "W0B0",
        "sensor": ["bme280", "bme280"]
    }
)

# Create a line plot for pressure and temperature
df[df["name"] == "env.pressure"].set_index("timestamp").value.plot(label="Pressure")
df[df["name"] == "env.temperature"].set_index("timestamp").value.plot(label="Temperature")

plt.legend()
plt.xlabel("Timestamp")
plt.ylabel("Value")
plt.title("Line Plot of Pressure and Temperature for W0B0")
plt.show()

# Create a histogram for pressure and temperature
df[df["name"] == "env.pressure"].value.hist(bins=100, label="Pressure", alpha=0.5)
df[df["name"] == "env.temperature"].value.hist(bins=100, label="Temperature", alpha=0.5)

plt.legend()
plt.xlabel("Value")
plt.ylabel("Frequency")
plt.title("Histogram of Pressure and Temperature for W0B0")
plt.show()
```

Note: I used `alpha=0.5` when plotting the histograms to make them semi-transparent so you can see both plots at once.

>>> Can you make it two separate functions, one for pressure and one for temperature? I get HTTP Error 400 because you can't group the field conditions like that (e.g., "['env.pressure', 'env.temperature']")
Here are the two functions, one for pressure and one for temperature:

```python
import pandas as pd
import matplotlib.pyplot as plt

def plot_pressure_and_hist():
    # Filter data for node W0B0 from the last 3 hours and only consider pressure
    df = sage_data_client.query(
        start="-3h",
        filter={
            "name": "env.pressure",
            "vsn": "W0B0",
            "sensor": "bme280"
        }
    )

    # Create a line plot for pressure
    df.set_index("timestamp").value.plot(label="Pressure")

    plt.legend()
    plt.xlabel("Timestamp")
    plt.ylabel("Value")
    plt.title("Line Plot of Pressure for W0B0")
    plt.show()

    # Create a histogram for pressure
    df.value.hist(bins=100)
    plt.xlabel("Value")
    plt.ylabel("Frequency")
    plt.title("Histogram of Pressure for W0B0")
    plt.show()

def plot_temperature_and_hist():
    # Filter data for node W0B0 from the last 3 hours and only consider temperature
    df = sage_data_client.query(
        start="-3h",
        filter={
            "name": "env.temperature",
            "vsn": "W0B0",
            "sensor": "bme280"
        }
    )

    # Create a line plot for temperature
    df.set_index("timestamp").value.plot(label="Temperature")

    plt.legend()
    plt.xlabel("Timestamp")
    plt.ylabel("Value")
    plt.title("Line Plot of Temperature for W0B0")
    plt.show()

    # Create a histogram for temperature
    df.value.hist(bins=100)
    plt.xlabel("Value")
    plt.ylabel("Frequency")
    plt.title("Histogram of Temperature for W0B0")
    plt.show()
```

I also removed the `alpha` argument when plotting the histograms, as it's not necessary in this case.

>>> Can you provide me some tests, including automated code tests, to make sure this code is correct? 
Here are some tests you can use to ensure the correctness of your code:

**Unit Tests**

You can write unit tests using a testing framework such as `unittest` in Python. Here's an example:
```python
import unittest
from your_module import plot_pressure_and_hist, plot_temperature_and_hist

class TestPlotFunctions(unittest.TestCase):
    def setUp(self):
        self.pressure_df = pd.DataFrame({'timestamp': ['2022-01-01'], 'value': [100]})
        self.temperature_df = pd.DataFrame({'timestamp': ['2022-01-01'], 'value': [20]})

    def test_plot_pressure_and_hist(self):
        with unittest.mock.patch('matplotlib.pyplot.show') as mock_show:
            plot_pressure_and_hist()
            mock_show.assert_called_once()

    def test_plot_temperature_and_hist(self):
        with unittest.mock.patch('matplotlib.pyplot.show') as mock_show:
            plot_temperature_and_hist()
            mock_show.assert_called_once()

    def test_plot_pressure_and_hist_with_data(self):
        with unittest.mock.patch('matplotlib.pyplot.show') as mock_show:
            plot_pressure_and_hist()
            mock_show.assert_called_once()

    def test_plot_temperature_and_hist_with_data(self):
        with unittest.mock.patch('matplotlib.pyplot.show') as mock_show:
            plot_temperature_and_hist()
            mock_show.assert_called_once()
```
**Integration Tests**

You can write integration tests to ensure that the functions work together correctly. Here's an example:
```python
import unittest
from your_module import sage_data_client, plot_pressure_and_hist, plot_temperature_and_hist

class TestIntegration(unittest.TestCase):
    def setUp(self):
        self.pressure_df = pd.DataFrame({'timestamp': ['2022-01-01'], 'value': [100]})
        self.temperature_df = pd.DataFrame({'timestamp': ['2022-01-01'], 'value': [20]})

    def test_plot_pressure_and_temperature(self):
        sage_data_client.query.return_value = self.pressure_df
        plot_pressure_and_hist()
        plot_temperature_and_hist()

        # Check that the plots were created correctly
        assert matplotlib.pyplot.show.called

if __name__ == '__main__':
    unittest.main()
```
**Automated Code Tests**

You can use tools such as `pylint` or `flake8` to automatically run tests on your code and catch any syntax errors. Here's an example:
```bash
pip install pylint flake8
pylint your_module.py
flake8 your_module.py
```
Note: You'll need to have the necessary dependencies installed in your environment for these tools to work.

I hope this helps! Let me know if you have any questions or need further assistance.